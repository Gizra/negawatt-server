<?php
/**
 * @file
 * Code for the IEC feature.
 */

include_once 'iec.features.inc';

/**
 * Set meter category by trying to match description with categories'
 * match-strings.
 *
 * @param $wrapper
 *  Wrapper for the new node.
 */
function iec_set_meter_category($wrapper) {
  // If meter category is already defined(e.g. during migration), end here.
  $category = $wrapper->{OG_VOCAB_FIELD}->value();
  if (!empty($category)) {
    return;
  }

  // Get vocabulary according to meter account (organic-group).
  $account = $wrapper->{OG_AUDIENCE_FIELD}->value();
  $group_id = $account->nid;
  $arr_vocabularies = og_vocab_relation_get_by_group('node', $group_id);
  $vocabulary_id = $arr_vocabularies[0]->vid;
  $vocabulary = taxonomy_vocabulary_load($vocabulary_id);

  // Try match meter description with any of the categories' match-strings
  $category = variable_get('iec_default_meter_category', 'אחר');
  $taxonomy_tree = taxonomy_get_tree($vocabulary_id);
  $search_string = $wrapper->field_place_address->value() . ' ' . $wrapper->field_place_description->value();
  // Loop for all categories and try to find a match.
  foreach ($taxonomy_tree as $term) {
    $tax_wrapper = entity_metadata_wrapper('taxonomy_term', $term->tid);
    $match_strings = $tax_wrapper->field_match_strings->value();
    if (!$match_strings) {
      continue;
    }
    $match_strings = explode('|', $match_strings);
    // Look for all match-strings for match.
    foreach ($match_strings as $match_str) {
      if (strpos($search_string, $match_str) !== FALSE) {
        // Match found, set category.
        $category = $tax_wrapper->name->value();
        // Leave both loops.
        break 2;
      }
    }
  }

  // Set meter-category.
  $arr_terms = taxonomy_get_term_by_name($category, $vocabulary->machine_name);
  $term_ids = array_keys($arr_terms);
  $term_id = $term_ids[0];

  $wrapper->{OG_VOCAB_FIELD}->set(array($term_id));
}

/**
 * Implements hook_node_presave().
 *
 * Find if there is already an IEC meter with the same contract ID, and if so
 * reference the newly created one, with the original one, which always has
 * the lowest node ID.
 */
function iec_node_presave($node) {
  if (!empty($node->nid)) {
    // Node is already saved.
    return;
  }

  if ($node->type != 'iec_meter') {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);

  // Set meter category by trying to match description with categories'
  // match-strings.
  iec_set_meter_category($wrapper);

  if ($wrapper->field_parent_contract->value()) {
    // Parent is already populated.
    return;
  }

  $contract_id = $wrapper->field_contract_id->value();

  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'iec_meter')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_contract_id', 'value', $contract_id)
    ->propertyOrderBy('nid', 'ASC')
    ->range(0, 1)
    ->execute();

  if (empty($result['node'])) {
    // This is the first contract ID saved.
    return;
  }

  $nid = key($result['node']);
  $wrapper->field_parent_contract->set($nid);
}
