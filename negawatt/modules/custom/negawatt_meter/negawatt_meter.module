<?php
/**
 * @file
 * Code for the Meter feature and functionality.
 */

include_once 'negawatt_meter.features.inc';

/**
 * Checks whether node-type is a meter type.
 *
 * @param $node_type
 *    The type to test
 *
 * @return bool
 *    True if the node-type is a meter-type.
 */
function negawatt_meter_is_meter($node_type) {
  return in_array($node_type, array('iec_meter', 'modbus_meter'));
}

/**
 * Set meter category by trying to match description with categories'
 * match-strings.
 *
 * @param $wrapper
 *  Wrapper for the new node.
 */
function negawatt_meter_set_meter_category($node) {
  // If meter category is already defined (e.g. during migration), end here.
  $wrapper = entity_metadata_wrapper('node', $node);
  $category = $wrapper->field_meter_category->value();
  if (!empty($category)) {
    return;
  }

  // Get vocabulary.
  $vocabulary = taxonomy_vocabulary_machine_name_load('meter_category');

  // Try to match meter description with any of the categories' match-strings
  $category = variable_get('iec_default_meter_category', 'אחר');
  $taxonomy_tree = taxonomy_get_tree($vocabulary->vid);
  $search_string = $wrapper->field_place_address->value() . ' ' . $wrapper->field_place_description->value();
  // Loop for all categories and try to find a match.
  foreach ($taxonomy_tree as $term) {
    $tax_wrapper = entity_metadata_wrapper('taxonomy_term', $term->tid);
    $match_strings = $tax_wrapper->field_match_strings->value();
    if (!$match_strings) {
      continue;
    }
    $match_strings = explode('|', $match_strings);
    // Look for all match-strings for match.
    foreach ($match_strings as $match_str) {
      if (strpos($search_string, $match_str) !== FALSE) {
        // Match found, set category.
        $category = $tax_wrapper->name->value();
        // Leave both loops.
        break 2;
      }
    }
  }

  // Set meter-category.
  $arr_terms = taxonomy_get_term_by_name($category, $vocabulary->machine_name);
  $term_ids = array_keys($arr_terms);
  $term_id = $term_ids[0];

  $wrapper->field_meter_category->set($term_id);
}

/**
 * Read image EFIX record and extract GPS location, if exists.
 *
 * @param $image
 *    Path to image file.
 *
 * @return array|bool
 *    array(LAT, LONG), if GPS data was found.
 *    FALSE, if GPS data wasn't found in image.
 */
function negawatt_exif_to_latlong($image)
{
  //Read EXIF data
  $exif=exif_read_data($image, 0, true);
  if(!$exif || empty($exif['GPS']['GPSLatitude']))
  {
    // No Geocode data found
    return false;
  }
  else
  {
    // Parse Lat/Long data and convert to decimal degrees
    $lat_ref = $exif['GPS']['GPSLatitudeRef'];
    $lat = $exif['GPS']['GPSLatitude'];
    list($num, $dec) = explode('/', $lat[0]);
    $lat_s = $num / $dec;
    list($num, $dec) = explode('/', $lat[1]);
    $lat_m = $num / $dec;
    list($num, $dec) = explode('/', $lat[2]);
    $lat_v = $num / $dec;

    $lon_ref = $exif['GPS']['GPSLongitudeRef'];
    $lon = $exif['GPS']['GPSLongitude'];
    list($num, $dec) = explode('/', $lon[0]);
    $lon_s = $num / $dec;
    list($num, $dec) = explode('/', $lon[1]);
    $lon_m = $num / $dec;
    list($num, $dec) = explode('/', $lon[2]);
    $lon_v = $num / $dec;

    // Calculates the location in decimal form.
    $gps_int = array(
      ($lat_s + $lat_m / 60.0 + $lat_v / 3600.0) * ($lat_ref == 'N' ? +1 : -1),
      ($lon_s + $lon_m / 60.0 + $lon_v / 3600.0) * ($lon_ref == 'E' ? +1 : -1),
    );
    return $gps_int;
  }
}

/**
 * Check and update Geocode, if needed.
 *
 * For iec_meter, if place-address and/or place-locality were changed, resolve
 * geocode using Geocoder package. First try to resolve whole address (street,
 * city), if fails, try resolving for city only.
 *
 * @param $wrapper
 *  Wrapper for the new node.
 */
function negawatt_meter_set_meter_location($node) {
  require_once libraries_get_path('geocoder') . '/src/autoload.php';

  $wrapper = entity_metadata_wrapper('node', $node);
  // New node doesn't have 'original' field.
  $wrapper_original = $node->is_new ? NULL : entity_metadata_wrapper('node', $node->original);
  $location_changed = FALSE;

  // Check if image field was changed.
  $image_exists = $wrapper->field_image->value();
  $original_image_exists = $node->is_new ? FALSE : !empty($wrapper_original->field_image) && $wrapper_original->field_image->value();
  $image_was_changed = $image_exists && !empty($node->is_new) ||
    $image_exists && !$original_image_exists ||
    $image_exists && $original_image_exists &&
    $wrapper->field_image[0]->file->fid->value() != $wrapper_original->field_image[0]->file->fid->value();

  if ($image_was_changed) {
    // Try getting GPS data from EXIF record of the new image.
    $fid = $wrapper->field_image[0]->file->fid->value();
    $file = file_load($fid);
    $path = drupal_realpath($file->uri);
    $location = negawatt_exif_to_latlong($path);
    if ($location) {
      // Set location field.
      $lat = $location[0];
      $lng = $location[1];
      // Mark to recalculate location field.
      $location_changed = TRUE;
    }
  }

  // If address field was changed, try geocoding by the address. However, don't
  // try to geocode if location was already set by image EXIF above.

  // Check if address field was changed.
  if ((!empty($node->is_new) ||
      $wrapper->field_place_address->value() != $wrapper_original->field_place_address->value() ||
      $wrapper->field_place_locality->value() != $wrapper_original->field_place_locality->value())
    && !$location_changed) {

    // Get googlemaps API key from variable.
    $googlemaps_api_key = variable_get('googlemaps_api_key');

    // Prepare geocoder as static.
    $adapter  = &drupal_static(__FUNCTION__ . '_adapter', NULL);
    $provider = &drupal_static(__FUNCTION__ . '_provider', NULL);
    $geocoder = &drupal_static(__FUNCTION__ . '_geocoder', NULL);
    $adapter = $adapter ? $adapter : new \Geocoder\HttpAdapter\CurlHttpAdapter();
    $provider = $provider ? $provider : new \Geocoder\Provider\GoogleMapsProvider($adapter, NULL, NULL, FALSE, $googlemaps_api_key);
    $geocoder = $geocoder ? $geocoder : new \Geocoder\Geocoder($provider);

    // Look for geocode.
    $street_addr = $wrapper->field_place_address->value();
    $city = $wrapper->field_place_locality->value();
    $full_address = $street_addr . ', ' . $city;

    if ($full_address == ', ') {
      // Don't try to geocode empty address.
      return;
    }

    $geocode_succeeded = TRUE;
    try {
      $geocode = $geocoder->geocode($full_address);
      // Test that indeed geocode managed to decipher street address
      if (!$geocode->getStreetName()) {
        throw new Exception();
      }
      // Geocoding on full address succeeded, set geocode-valid field.
      $wrapper->field_location_valid->set(TRUE);
    }
    catch (Exception $e) {
      watchdog('iec geocode', 'Couldn`t geocode the address "@address"', array('@address' => $full_address), WATCHDOG_WARNING);
      $wrapper->field_location_valid->set(FALSE);
      $geocode_succeeded = FALSE;
    }

    if (!$geocode_succeeded) {
      // Geocoding on full address failed, try locating on city name only.
      try {
        $street_addr = '';
        $geocode = $geocoder->geocode($city);
        $geocode_succeeded = TRUE;
      }
      catch (Exception $e) {
        // Geocoding failed.
        watchdog('iec geocode', 'Couldn`t geocode the city "@address"', array('@address' => $city), WATCHDOG_WARNING);
      }
    }

    // Set location field, if geocoding was successful.
    if ($geocode_succeeded) {
      $lat = $geocode->getLatitude();
      $lng = $geocode->getLongitude();
      // Mark to recalculate location field.
      $location_changed = TRUE;

      $wrapper->field_address->set(array(
        'thoroughfare' => $street_addr,
        'locality' => $city,
        'country' => $geocode->getCountryCode(),
      ));
    }
  }

  // Update location field.
  if ($location_changed) {
    // hook_node_presave() is called after hook_field_presave(), so
    // geolocation_field_presave() was already called and will not be called
    // again. Has to call it explicitly to calc field-location's internal
    // values after setting lat, long.
    $field = field_info_field('field_location');
    $entity = field_info_instance('node', 'field_location', 'iec_meter');
    $langcode = LANGUAGE_NONE;
    $items = array(array(
      'lat' => $lat,
      'lng' => $lng,
    ));
    geolocation_field_presave('node', $node, $field, $entity, $langcode, $items);
    $wrapper->field_location->set($items[0]);
  }
}

/**
 * Implements hook_node_presave() - update category, location if needed.
 *
 * @param $node
 *    The node to update.
 */
function negawatt_meter_node_presave($node) {

  // Make sure we're dealing with a meter.
  if (!negawatt_meter_is_meter($node->type)) {
    return;
  }

  // Set meter location by image EXIF record or address field.
  negawatt_meter_set_meter_location($node);

  // Set meter category by trying to match description with categories'
  // match-strings.
  negawatt_meter_set_meter_category($node);

  // The label is optional in the IEC meter's restful. Create a default meter
  // title in case it was left empty.
  if (!$node->title) {
    $node->title = negawatt_meter_get_meter_title($node);
  }
}


/**
 * Implements hook_field_attach_create_bundle().
 *
 * Add icon categories to newly created vocabs.
 */
function negawatt_meter_field_attach_create_bundle($entity_type, $bundle) {
  if ($entity_type != 'taxonomy_term') {
    // Not a vocabulary.
    return;
  }

  if (strpos($bundle, 'meter_category') !== 0) {
    // Not a meter category bundle.
    return;
  }

  // Create a taxonomy field and use the taxonomy entity we created earlier

  // Prepare icon categories field.
  if (!field_info_field('field_icon_categories')) {
    // @todo: Make a select list.
    $field = array(
      'active' => 1,
      'cardinality' => 1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'field_icon_categories',
      'foreign keys' => array(),
      'indexes' => array(
        'value' => array(
          0 => 'value',
        ),
      ),
      'locked' => 0,
      'module' => 'list',
      'settings' => array(
        'allowed_values' => array(
          'alarm' => 'alarm',
          'arrow' => 'arrow',
          'book' => 'book',
          'buho' => 'buho',
          'electricity' => 'electricity',
          'home' => 'home',
          'people' => 'people',
          'public-buildings' => 'public-buildings',
          'security' => 'security',
        ),
        'allowed_values_function' => '',
      ),
      'translatable' => 0,
      'type' => 'list_text',
    );
    field_create_field($field);
  }

  if (!field_info_instance('taxonomy_term', 'field_icon_categories', $bundle)) {
    $instance = array(
      'bundle' => $bundle,
      'default_value' => NULL,
      'deleted' => 0,
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'text',
          'settings' => array(),
          'type' => 'text_default',
          'weight' => 0,
        ),
      ),
      'entity_type' => 'taxonomy_term',
      'field_name' => 'field_icon_categories',
      'label' => 'Icon categories',
      'required' => FALSE,
      'settings' => array(
        'text_processing' => 0,
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'module' => 'options',
        'settings' => array(
          'size' => 60,
        ),
        'type' => 'options_select',
        'weight' => 1,
      ),
    );
    field_create_instance($instance);
  }

  // Prepare match-string field.
  if (!field_info_field('field_match_strings')) {
    $field = array(
      'active' => 1,
      'cardinality' => 1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'field_match_strings',
      'foreign keys' => array(
        'format' => array(
          'columns' => array(
            'format' => 'format',
          ),
          'table' => 'filter_format',
        ),
      ),
      'indexes' => array(
        'format' => array(
          0 => 'format',
        ),
      ),
      'locked' => 0,
      'module' => 'text',
      'settings' => array(
        'max_length' => 255,
      ),
      'translatable' => 0,
      'type' => 'text',
    );
    field_create_field($field);
  }

  if (!field_info_instance('taxonomy_term', 'field_match_strings', $bundle)) {
    $instance = array(
      'bundle' => $bundle,
      'default_value' => NULL,
      'deleted' => 0,
      'description' => 'A list of strings, separated by bar (\'|\'), that will match the meter description for this category.',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'text',
          'settings' => array(),
          'type' => 'text_default',
          'weight' => 1,
        ),
      ),
      'entity_type' => 'taxonomy_term',
      'field_name' => 'field_match_strings',
      'label' => 'Match strings',
      'required' => 0,
      'settings' => array(
        'text_processing' => 0,
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => 60,
        ),
        'type' => 'text_textfield',
        'weight' => 2,
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Create a default title for a meter.
 *
 * Creates a title according to the description or address when they're
 * available. Otherwise according to the bundle specific fields.
 * - For IEC meters: [contract]-[code]-[serial]
 * - For Modbus meters: [ip]:[port]-[meter id]
 *
 * @param $node
 *   A meter node.
 *
 * @return string
 *   The meter title.
 */
function negawatt_meter_get_meter_title($node) {
  $wrapper = entity_metadata_wrapper('node', $node);

  if ($wrapper->field_place_description->value()) {
    // Title is the meter description.
    return $wrapper->field_place_description->value();
  }
  if ($wrapper->field_place_address->value()) {
    // Title is the meter address.
    return $wrapper->field_place_address->value();
  }

  switch ($node->type) {
    // Default IEC title: [contract]-[code]-[serial].
    case 'iec_meter':
      $contract = $wrapper->field_contract_id->value();
      $meter_code = $wrapper->field_meter_code->value();
      $meter_serial = $wrapper->field_meter_serial->value();
      return $contract . '-' . $meter_code . '-' . $meter_serial;

    // Default Modbus title: [ip]:[port]-[meter id].
    case 'modbus_meter':
      $ip = $wrapper->field_meter_ip_address->value();
      $port = $wrapper->field_meter_port->value();
      $id = $wrapper->field_meter_id->value();
      return $ip . ':' . $port . '-' . $id;
  }
}
