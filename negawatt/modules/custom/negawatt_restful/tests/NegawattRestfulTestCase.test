<?php

/**
 * @file
 * Contains NegawattNormalizerMeterProcessTestCase
 */

class NegawattRestfulTestCase extends NegawattWebTestCase {

  /**
   * Get test info.
   *
   * @return array
   *    test info
   */
  public static function getInfo() {
    return array(
      'name' => 'Restful API',
      'description' => 'Test the restful API for negawatt-server.',
      'group' => 'Negawatt',
    );
  }

  /**
   * Prepare accounts, OG-vocabularies, and taxonomy-terms.
   *
   * @throws OgVocabException
   */
  function setUpCategories() {
    // Create two OG account nodes.
    $settings = array(
      'type' => 'account',
      OG_GROUP_FIELD => array('und' => array('0' => array('value' => 1))),
    );
    $account_node1 = $this->drupalCreateNode($settings);

    $settings[OG_GROUP_FIELD] = array('und' => array('0' => array('value' => 2)));
    $account_node2 = $this->drupalCreateNode($settings);

    $this->account_node1 = $account_node1;
    $this->account_node2 = $account_node2;

    // Create several meter-categories.

    // Get the vocabulary
    $vocabulary = taxonomy_vocabulary_machine_name_load('meter_category');

    // Add school.
    $values = array(
      'vid' => $vocabulary->vid,
      'name' => 'school',
      'vocabulary_machine_name' => $vocabulary->machine_name,
    );
    $term = entity_create('taxonomy_term', $values);
    $wrapper = entity_metadata_wrapper('taxonomy_term', $term);
    $wrapper->field_match_strings->set('בית ספר|בי"ס');
    $wrapper->save();
    // Save term id for late use.
    $this->taxonomy_term_ids['school'] = $term->tid;

    // Add 'other'.
    $values['name'] = 'אחר';
    $term = entity_create('taxonomy_term', $values);
    entity_save('taxonomy_term', $term);
    // Save term id for late use.
    $this->taxonomy_term_ids['other'] = $term->tid;

    // Add 'street light'.
    $values['name'] = 'street light';
    $term = entity_create('taxonomy_term', $values);
    $wrapper = entity_metadata_wrapper('taxonomy_term', $term);
    $wrapper->field_match_strings->set('תאורת|מאור');
    $wrapper->save();
    // Save term id for late use.
    $this->taxonomy_term_ids['street light'] = $term->tid;
  }

  /**
   * Setup test environment.
   * Prepare meter nodes and raw data entities.
   */
  function setUp() {
    parent::setUp('negawatt_restful');

    $this->setUpCategories();

    // Create modbus meter nodes.
    $settings = array(
      'type' => 'modbus_meter',
      'field_max_frequency' => array('und' => array('0' => array('value' => \NegaWattNormalizerTimeManagerInterface::MINUTE))),
      'field_meter_id' => array('und' => array('0' => array('value' => 1))),
      'field_place_address' => array('und' => array('0' => array('value' => 'לכיש 25'))),
      'field_place_description' => array('und' => array('0' => array('value' => 'בי"ס ויצמן'))),
      'field_place_locality' => array('und' => array('0' => array('value' => 'קרית גת'))),
      OG_AUDIENCE_FIELD => array('und' => array('0' => array('target_id' => 1))),
    );

    // 2 meters for account 1
    $meter_node1 = $this->drupalCreateNode($settings);
    $meter_node2 = $this->drupalCreateNode($settings);

    // Create IEC meter nodes.
    // Meter 1 should be assigned automatically to category 'school'
    $settings = array(
      'type' => 'iec_meter',
      'field_max_frequency' => array('und' => array('0' => array('value' => \NegaWattNormalizerTimeManagerInterface::MONTH))),
      'field_place_address' => array('und' => array('0' => array('value' => 'לכיש 25'))),
      'field_place_description' => array('und' => array('0' => array('value' => 'בי"ס ויצמן'))),
      'field_place_locality' => array('und' => array('0' => array('value' => 'קרית גת'))),
      OG_AUDIENCE_FIELD => array('und' => array('0' => array('target_id' => 1))),
    );

    // More 3 meters for account 1
    $meter_node3 = $this->drupalCreateNode($settings);

    // Meter 4 should be assigned to category 'other'.
    $settings['field_place_description'] = array('und' => array('0' => array('value' => 'תיאור לא ברור')));
    $meter_node4 = $this->drupalCreateNode($settings);

    // Meter 5 should be assigned to category 'street light'.
    $settings['field_place_description'] = array('und' => array('0' => array('value' => 'מאור רחובות')));
    $meter_node5 = $this->drupalCreateNode($settings);

    // Meter 6 for account 2.
    // Meter 6 should be assigned to category 'street light'.
    // there is such a category.
    $settings[OG_AUDIENCE_FIELD] = array('und' => array('0' => array('target_id' => 2)));
    $meter_node6 = $this->drupalCreateNode($settings);

    // Save nodes for later.
    $this->meterNode1 = $meter_node1;
    $this->meterNode2 = $meter_node2;
    $this->meterNode3 = $meter_node3;
    $this->meterNode4 = $meter_node4;
    $this->meterNode5 = $meter_node5;
    $this->meterNode6 = $meter_node6;

    // Create some messages
    $message = message_create('demand_exceeds_cap');
    $wrapper = entity_metadata_wrapper('message', $message);
    $wrapper->field_meter->set($meter_node1);
    $wrapper->field_meter_account->set($this->account_node1);
    $wrapper->field_message_place_description->set('first message');
    $wrapper->save();

    $message = message_create('demand_deviate');
    $wrapper = entity_metadata_wrapper('message', $message);
    $wrapper->field_meter->set($meter_node6);
    $wrapper->field_meter_account->set($this->account_node2);
    $wrapper->field_message_place_description->set('second message');
    $wrapper->save();

    // Create a user with access to account 2 only.
    $user1 = $this->drupalCreateUser();
    og_group('node', 2, array('entity' => $user1));
    // Reload user to get group membership changes.
    $user1 = user_load($user1->uid, TRUE);

    // Create a user with access no account.
    $user2 = $this->drupalCreateUser();

    // Save new user.
    $this->user1 = $user1;
    $this->user2 = $user2;

    // Create the raw data.
    $values_info = array(
      array(
        // Two Modbus entries for hour 15:00.
        'frequency' => \NegaWattNormalizerTimeManagerInterface::MINUTE,
        'timestamp' => strtotime('2014-6-12 15:00'),
        'rate_type' => 'flat',
        'meter_nid' => $meter_node1->nid,
        'avg_power' => 2,
        'sum_kwh' => 1440,
        'min_power_factor' => 0.90,
      ),
      array(
        'frequency' => \NegaWattNormalizerTimeManagerInterface::MINUTE,
        'timestamp' => strtotime('2014-6-12 15:15'),
        'rate_type' => 'flat',
        'meter_nid' => $meter_node1->nid,
        'avg_power' => 3,
        'sum_kwh' => 2160,
        'min_power_factor' => 0.96,
      ),
      // One entry at 16:00, should not be read when processing 15:00-16:00
      array(
        'frequency' => \NegaWattNormalizerTimeManagerInterface::MINUTE,
        'timestamp' => strtotime('2014-6-12 16:00'),
        'rate_type' => 'flat',
        'meter_nid' => $meter_node1->nid,
        'avg_power' => 2,
        'sum_kwh' => 1440,
        'min_power_factor' => 0.96,
      ),
      // Hourly entries
      array(
        'frequency' => \NegaWattNormalizerTimeManagerInterface::HOUR,
        'timestamp' => strtotime('2014-6-12 15:00'),
        'rate_type' => 'flat',
        'meter_nid' => $meter_node1->nid,
        'avg_power' => 2,
        'sum_kwh' => 1440,
        'min_power_factor' => 0.96,
      ),
      array(
        'frequency' => \NegaWattNormalizerTimeManagerInterface::HOUR,
        'timestamp' => strtotime('2014-6-12 16:00'),
        'rate_type' => 'flat',
        'meter_nid' => $meter_node1->nid,
        'avg_power' => 2,
        'sum_kwh' => 1440,
        'min_power_factor' => 0.96,
      ),
      // Daily entries
      array(
        'frequency' => \NegaWattNormalizerTimeManagerInterface::DAY,
        'timestamp' => strtotime('2014-6-12 00:00'),
        'rate_type' => 'flat',
        'meter_nid' => $meter_node1->nid,
        'avg_power' => 2,
        'sum_kwh' => 2000,
        'min_power_factor' => 0.96,
      ),
      // One entry for meter 2, should not be read.
      array(
        'frequency' => \NegaWattNormalizerTimeManagerInterface::MINUTE,
        'timestamp' => strtotime('2014-6-12 15:00'),
        'rate_type' => 'flat',
        'meter_nid' => $meter_node2->nid,
        'avg_power' => 4,
        'sum_kwh' => 1440,
        'min_power_factor' => 0.96,
      ),
    );

    foreach ($values_info as $values) {
      $entity = entity_create('electricity', $values);
      $entity->save();
    }
  }

  /**
   * Test 'meters' API.
   * - Should give both modbus and iec meters.
   * - Max-frequency field should show.
   * - Meter-category field should list the entire category hierarchy.
   * - Particular modbus and iec meters' fields will appear.
   */
  function testMetersApi() {

    $handler = restful_get_restful_handler('modbus_meters');
    $response = $handler->get();

    // There should be 2 meters
    $this->assertTrue(is_array($response) && count($response) == 2, 'Two Modbus meters were found.');
    $meter = $response[0];
    $this->assertEqual($meter['type'], 'modbus_meter', 'Meter type is correct.');
    $this->assertEqual($meter['max_frequency'], 5, 'Max-frequency field is correct.');
    $this->assertEqual($meter['meter_id'], 1, 'Meter ID field is correct.');

    $handler = restful_get_restful_handler('iec_meters');
    $response = $handler->get();
    $this->assertTrue(is_array($response) && count($response) == 4, '4 IEC meters were found.');

    // Test meter category.
    $meter = $response[0];
    $tax_id = $this->taxonomy_term_ids['school'];
    $this->assertEqual($meter['meter_categories'][$tax_id]['id'], $tax_id, 'Meter 3 category field (school) is correct.');
    $meter = $response[1];
    $tax_id = $this->taxonomy_term_ids['other'];
    $this->assertEqual($meter['meter_categories'][$tax_id]['id'], $tax_id, 'Meter 4 category field (other) is correct.');
    $meter = $response[2];
    $tax_id = $this->taxonomy_term_ids['street light'];
    $this->assertEqual($meter['meter_categories'][$tax_id]['id'], $tax_id, 'Meter 5 category field (street light) is correct.');
    $meter = $response[3];
    $tax_id = $this->taxonomy_term_ids['street light'];
    $this->assertEqual($meter['meter_categories'][$tax_id]['id'], $tax_id, 'Meter 6 category field (street light) is correct.');

    // Test POST request

    $handler = restful_get_restful_handler('iec_meters');

    // Create a new meter
    $request = array(
      'label' =>'4135364-604-1536093',
      'account' => 2,
      'contract' => 4135364,
      'place_address' => 'דרבן 6',
      'place_description' => '',
      'place_locality' => 'אילת',
      'meter_code' => 604,
      'meter_serial' => 1536093,
      'max_frequency' => 2,
    );
    $result = $handler->post('', $request);
    $id = $result[0]['id'];
    $this->assertEqual($result[0]['label'], '4135364-604-1536093', '<b>Testing POST request</b><br>Meter created successfuly.');
    $this->assertEqual($result[0]['max_frequency'], 2, 'max_frequency field is OK.');

    $request['max_frequency'] = 5;
    $result = $handler->post('', $request);

    $this->assertEqual($result[0]['id'], $id, 'Meter update successful.');
    $this->assertEqual($result[0]['max_frequency'], 5, 'Meter max_frequency was updated.');

    // @todo: Test 'meters' API call
    // @todo: Test that both modbus and iec meters are returned.
  }

  /**
   * Test 'electricity' API.
   * - Should sum values.
   * - Test filter by type.
   * - Test filter by meter-category - should filter values from child categories
   *   as well - e.g. if filtering by category 5 (edu), should show values related
   *   to categories 6 (kindergarten) and 7 (schools).
   */
  function testElectricityApi() {

    $handler = restful_get_restful_handler('electricity');
    $response = $handler->get('', array('filter' => array('meter_account' => 1)));

    // There should be 6 entities (due to sum over meters).
    $this->assertTrue(is_array($response) && count($response) == 6, '<b>Testing electricity API</b><br>6 entities were found.');
    $entity = $response[0];
    $this->assertEqual($entity['frequency'], NegaWattNormalizerTimeManagerInterface::DAY, 'Entity 0 is of type DAY.');
    $this->assertEqual($entity['meter'], $this->meterNode1->nid, 'Entity is for meter 1.');
    $this->assertEqual($entity['timestamp'], strtotime('2014-6-12'), 'Entity timestamp is correct.');
    $this->assertEqual($entity['kwh'], 2000, 'Entity kWh is correct.');
    $entity = $response[1];
    $this->assertEqual($entity['frequency'], NegaWattNormalizerTimeManagerInterface::HOUR, 'Entity 1 is of type HOUR.');
    $this->assertEqual($entity['meter'], $this->meterNode1->nid, 'Entity is for meter 1.');
    $this->assertEqual($entity['timestamp'], strtotime('2014-6-12 15:00'), 'Entity timestamp is correct.');
    $entity = $response[2];
    $this->assertEqual($entity['frequency'], NegaWattNormalizerTimeManagerInterface::MINUTE, 'Entity 2 is of type MINUTE.');
    $this->assertEqual($entity['meter'], $this->meterNode1->nid, 'Entity is for meter 1.');
    $this->assertEqual($entity['timestamp'], strtotime('2014-6-12 15:00'), 'Entity timestamp is correct.');
    $this->assertEqual($entity['kwh'], 2880, 'Entity kWh is correct.');
    $this->assertEqual($entity['avg_power'], 3, 'Entity avg-power is correct.');
    $entity = $response[4];
    $this->assertEqual($entity['frequency'], NegaWattNormalizerTimeManagerInterface::HOUR, 'Entity 4 is of type HOUR.');
    $this->assertEqual($entity['meter'], $this->meterNode1->nid, 'Entity is for meter 1.');
    $this->assertEqual($entity['timestamp'], strtotime('2014-6-12 16:00'), 'Entity timestamp is correct.');
    $summary = $handler->getValueMetadata('electricity', 'summary');
    $this->assertEqual($summary['type'], 'category', 'Summary type is correct.');
    $this->assertEqual(count($summary['values']), 1, 'Only one category in summary.');
    $this->assertTrue(!empty($summary['values'][1]), 'Category 1 ("other") in summary.');
    $this->assertEqual($summary['values'][1], 11360, 'Summary value is correct.');
    $this->assertTrue(!empty($summary['timestamp']), 'Timestamp appears in summary.');
    $this->assertEqual($summary['timestamp']['min'], strtotime('2014-6-12 00:00'), 'Min timestamp value is correct.');
    $this->assertEqual($summary['timestamp']['max'], strtotime('2014-6-12 16:00'), 'Max timestamp value is correct.');

    // @todo: Add test for summation of kWh of different meters. For that we
    // need to get the data from a database.

    // Test filter on type=2 (MONTH)
    $response = $handler->get('', array('filter' => array('meter_account' => 1, 'frequency' => 4)));
    // There should be 2 entities.
    $this->assertTrue(is_array($response) && count($response) == 2, '<b>Testing electricity with filter for type=MONTH</b><br>2 entities were found.');
    $entity = $response[0];
    $this->assertEqual($entity['frequency'], NegaWattNormalizerTimeManagerInterface::HOUR, 'Entity 0 is of type HOUR.');
    $this->assertEqual($entity['meter'], $this->meterNode1->nid, 'Entity is for meter 1.');
    $this->assertEqual($entity['timestamp'], strtotime('2014-6-12 15:00'), 'Entity timestamp is correct.');
    $entity = $response[1];
    $this->assertEqual($entity['frequency'], NegaWattNormalizerTimeManagerInterface::HOUR, 'Entity 1 is of type HOUR.');
    $this->assertEqual($entity['meter'], $this->meterNode1->nid, 'Entity is for meter 1.');
    $this->assertEqual($entity['timestamp'], strtotime('2014-6-12 16:00'), 'Entity timestamp is correct.');

    // @todo: Add tests for filter by category.
  }

  /**
   * Test 'message' API.
   * - Test that messages are bounded to user's account permissions.
   */
  function testMessageApi() {

    $handler = restful_get_restful_handler('notifications');

    // Test account with access to both groups.
    $response = $handler->get('');

    // There should be 2 entities.
    $this->assertTrue(is_array($response) && count($response) == 2, '<b>Testing messages API</b><br>2 entities were found.');
    $entity = $response[0];
    $this->assertEqual($entity['description'], 'first message', 'Entity 0 place-description is correct.');
    $entity = $response[1];
    $this->assertEqual($entity['description'], 'second message', 'Entity 1 place-description is correct.');

    // Test account filter.
    $response = $handler->get('', array('filter' => array('meter_account' => 2)));
    // There should be 1 entity.
    $this->assertTrue(is_array($response) && count($response) == 1, 'Testing filter by account, only one entity was found.');
    $entity = $response[0];
    $this->assertEqual($entity['description'], 'second message', 'Entity place-description is correct.');

    // Change user to user1, with access to accounts 2 only.
    $handler->setAccount($this->user1);

    // Test that user has access only to second message
    $response = $handler->get('');
    // There should be 1 entity.
    $this->assertTrue(is_array($response) && count($response) == 1, 'Testing user access, only one entity was found.');
    $entity = $response[0];
    $this->assertEqual($entity['description'], 'second message', 'Entity place-description is correct.');

    // Test actual JSON result.
    $formatter_handler = \RestfulManager::outputFormat($handler);
    $json_output = $formatter_handler->format($response);
    $output = json_decode($json_output);
    $this->assertEqual(count($output->data), 1, 'Output array count is correct.');
    $this->assertEqual($output->count, 1, 'Output count is correct.');

    // Test account filter with no access (user has access only to account 2).
    $response = $handler->get('', array('filter' => array('meter_account' => 1)));
    // There should be no entities now.
    $this->assertTrue($response == NULL, 'Testing filter by account with no permission, no entities were found.');

    // Change to user2, no account membership.
    $handler->setAccount($this->user2);

    // Current user is not related to any account, exception will be issued.
    try {
      $response = $handler->get('');
      $this->fail('<b>Testing messages API</b><br>Got exception for user w/o permissions.');
    }
    catch (Exception $e) {
      $this->pass('<b>Testing messages API</b><br>Got exception for user w/o permissions.');
    }
  }
}
